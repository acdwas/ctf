
from z3 import *

s = Solver()

buf = [0xd6, 0xd4, 0x4d, 0x46, 0x53, 0xcd, 0x3e, 0xc7, 0x41, 0x6d, 0x50, 0x8a, 0x22, 0xbf,
        0x2c, 0x8e, 0x9, 0x9c, 0x1, 0x55, 0x10, 0x35, 0xf4, 0xc5, 0x6b, 0x68, 0xd8, 0x4f, 0xd5, 
        0x15, 0x13, 0xa8, 0x8, 0xd3, 0x42, 0x32, 0x54, 0x6, 0x94, 0xa1, 0xe0, 0xfb, 0xad, 0xff, 
        0x5f, 0x9e, 0x31, 0x82, 0x2, 0xca, 0x1e, 0xf2, 0x4a, 0xd7, 0xe2, 0x47, 0x48, 0x66, 0x80, 
        0x14, 0x67, 0xda, 0x27, 0x2d, 0x62, 0xe8, 0x40, 0x11, 0x23, 0x21, 0x84, 0x81, 0x74, 0x17, 
        0xbe, 0xce, 0x9b, 0x92, 0xb5, 0xe, 0xc6, 0xf0, 0x99, 0xf7, 0xa6, 0xdf, 0x3a, 0x76, 0xdd, 
        0x7c, 0xd1, 0xf6, 0xa9, 0xe9, 0xb7, 0x7, 0x97, 0x7a, 0xc2, 0x7e, 0x90, 0xb3, 0x4c, 0x30, 
        0x5d, 0xfd, 0x45, 0x85, 0xa3, 0x75, 0xe3, 0xf3, 0x49, 0xbd, 0xd, 0x38, 0xb4, 0x8b, 0xb9, 
        0xfa, 0xaa, 0x59, 0xb2, 0x2b, 0x6a, 0xcf, 0xb, 0xe6, 0x5, 0x63, 0x3c, 0xbc, 0xe5, 0x87, 
        0x79, 0x88, 0xa5, 0x3, 0x34, 0x43, 0xef, 0x1d, 0x7d, 0x89, 0xf1, 0x58, 0x33, 0xb1, 0x78, 
        0x83, 0x95, 0x7f, 0xdb, 0x7b, 0xb6, 0xf5, 0x1b, 0x2f, 0xba, 0x37, 0x8d, 0x18, 0x12, 0xd0, 
        0x73, 0xe7, 0x3f, 0x70, 0xa7, 0xc, 0xa, 0x64, 0x9f, 0x71, 0x6c, 0xae, 0x28, 0xeb, 0x96, 
        0xb8, 0xa2, 0x19, 0x8f, 0x86, 0xd9, 0xf, 0xdc, 0xc9, 0xf9, 0x39, 0x5e, 0xab, 0x51, 0xcb, 
        0xc1, 0x25, 0x20, 0x65, 0x44, 0xee, 0x5c, 0x3b, 0xa4, 0x1f, 0xcc, 0xaf, 0x29, 0xc8, 0x2a, 
        0x60, 0xac, 0x61, 0x5a, 0xf8, 0x5b, 0x4b, 0x93, 0xec, 0x8c, 0x9d, 0xa0, 0xc3, 0xde, 0x98, 
        0xbb, 0x36, 0xe4, 0xea, 0x72, 0x0, 0x3d, 0xb0, 0x24, 0x4e, 0x77, 0x6f, 0x52, 0xfe, 0xc0, 
        0x1a, 0x91, 0x69, 0x56, 0x2e, 0x9a, 0x16, 0xfc, 0x4, 0xe1, 0x26, 0x1c, 0x57, 0xed, 0xd2, 0x6e, 0xc4]

buf1 = [0x9, 0x16, 0x17, 0xf, 0x17, 0x56, 0x16, 0x44, 0x3a, 0x18, 0x53, 0x6f, 0x14, 0x3, 0x2a, 0x6, 
        0x6f, 0x31, 0x1c, 0x47, 0x2a, 0x6, 0x2d, 0x5f, 0x51, 0x1b, 0x0, 0x46, 0x4a, 0x0, 0x4, 0x55, 
        0x66, 0x50, 0x1, 0x4c]

a = [BitVec(f'a{i}', 32) for i in range(6*7)]
b = [BitVec(f'b{i}', 32) for i in range(36)]

key1 = b'w1nR4rs'

key1_ = []

for k in key1:
    for i in range(len(buf)):
        if k == buf[i]:
            key1_.append(i) 

def xor_block(z, x, a4):
    global a
    global b
    for i in range(6):
        b[x] = a[z+i] ^ a[z+i+6]
        x += 1

def crc8(i, a2):
    global a
    v3 = 0
    while a2:
        v3 ^= a[i] << 8
        for j in range(8,0,-1):
            v3 = If(v3 & 0x8000 != 0, v3 ^ 0x8380, v3)
            v3 *= 2
        a2 -= 1
        i += 1
    return v3 >> 8

for i in range(6*7):
    s.add(a[i] > 0x20, a[i] < 0x7f)

for i in range(7):
    s.add(key1_[i] == crc8(i*6,6))

for i in range(6):
    xor_block(i*6,i*6, 6)

for i in range(36):
    s.add(b[i] == buf1[i])

s.add(a[0] == ord('r'))
s.add(a[1] == ord('a'))
s.add(a[2] == ord('r'))
s.add(a[3] == ord('c'))
s.add(a[4] == ord('t'))
s.add(a[5] == ord('f'))
s.add(a[6] == ord('{'))


s.check()
m = s.model()

w = ''
for i in range(6*7):
    w += chr(m[a[i]].as_long())
print(w)

# rarctf{welc0m3_t0_y0ur_new_tr14l_281099b9}
